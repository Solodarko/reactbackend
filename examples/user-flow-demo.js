/**
 * Demonstrate the exact user flow:
 * 1. Admin dashboard shows QR that refreshes every 5 minutes
 * 2. Student scans → Scanner decodes JSON payload  
 * 3. Backend checks timestamp validity
 * 4. Valid → mark attendance, Expired → reject
 */

const { parseAndValidateQR } = require('../utils/qrCodeValidator');

// 1. Admin dashboard generates QR (refreshes every 5 minutes)
function adminDashboardGenerateQR() {
  const now = Date.now();
  const qrPayload = {
    id: `attendance_${now}`,
    type: 'attendance_check',
    timestamp: now,
    expiresAt: new Date(now + 5 * 60 * 1000).toISOString(), // 5 minutes
    checksum: Buffer.from(`attendance_${now}_${now}`, 'utf8').toString('base64'),
    location: 'admin_dashboard',
    user: {
      userId: 'admin123',
      username: 'prof_johnson',
      email: 'prof.johnson@university.edu',
      role: 'admin',
      studentId: '11111',
      firstName: 'Dr. Sarah',
      lastName: 'Johnson',
      fullName: 'Dr. Sarah Johnson',
      department: 'Computer Science'
    }
  };
  
  console.log('🎯 ADMIN DASHBOARD: QR Code Generated');
  console.log('   📄 JSON Payload:', JSON.stringify(qrPayload, null, 2));
  console.log('   ⏰ Expires at:', qrPayload.expiresAt);
  console.log('   🔄 Will refresh in 5 minutes...\n');
  
  return qrPayload;
}

// 2. Student scans QR → Scanner decodes JSON payload
function studentScanQR(qrPayload) {
  console.log('📱 STUDENT SCANS QR CODE');
  console.log('   🔍 Scanner decoding JSON payload...');
  console.log('   📋 Decoded QR ID:', qrPayload.id);
  console.log('   📅 Timestamp:', new Date(qrPayload.timestamp).toLocaleString());
  console.log('   ⏳ Expires at:', new Date(qrPayload.expiresAt).toLocaleString());
  console.log('   👨‍🏫 Generated by:', qrPayload.user.fullName);
  return qrPayload;
}

// 3. Backend checks timestamp validity
function backendValidateTimestamp(qrPayload) {
  console.log('\n🖥️  BACKEND VALIDATION');
  console.log('   ⏰ Checking if QR timestamp is still valid...');
  
  const validation = parseAndValidateQR(JSON.stringify(qrPayload));
  
  if (validation.isValid) {
    const now = new Date();
    const expiresAt = new Date(qrPayload.expiresAt);
    const minutesRemaining = Math.ceil((expiresAt - now) / (1000 * 60));
    
    console.log('   ✅ QR code is VALID!');
    console.log('   ⏱️  Time remaining:', minutesRemaining, 'minutes');
    return { valid: true, validation };
  } else {
    console.log('   ❌ QR code is EXPIRED!');
    console.log('   💬 Error:', validation.message);
    return { valid: false, validation };
  }
}

// 4. Valid → mark attendance, Expired → reject
function processAttendance(isValid, validation) {
  console.log('\n📝 ATTENDANCE PROCESSING');
  
  if (isValid) {
    // Simulate successful attendance marking
    const studentId = '67890'; // Scanning student
    const attendanceRecord = {
      StudentID: parseInt(studentId),
      Date: new Date(),
      Status: 'Present',
      attendanceType: 'qr_scan',
      qrCodeInfo: {
        qrId: validation.extractedData.qrCodeId,
        generatedBy: validation.extractedData.generatedBy.username,
        location: validation.extractedData.location
      }
    };
    
    console.log('   ✅ ATTENDANCE MARKED!');
    console.log('   👨‍🎓 Student ID:', attendanceRecord.StudentID);
    console.log('   📅 Date:', attendanceRecord.Date.toLocaleString());
    console.log('   📊 Status:', attendanceRecord.Status);
    console.log('   🏷️  QR Generated by:', attendanceRecord.qrCodeInfo.generatedBy);
    console.log('   💾 Stored in MongoDB ✓');
    
  } else {
    console.log('   ❌ ATTENDANCE REJECTED!');
    console.log('   🚫 Reason: QR code expired');
    console.log('   💡 Student must scan a fresh QR code');
  }
}

// Demo the complete flow
function demoCompleteFlow() {
  console.log('🎬 DEMONSTRATING COMPLETE QR ATTENDANCE FLOW\n');
  console.log('=' .repeat(60));
  
  // Step 1: Admin dashboard generates QR
  const qrPayload = adminDashboardGenerateQR();
  
  // Step 2: Student scans and decodes
  const scannedPayload = studentScanQR(qrPayload);
  
  // Step 3: Backend validates timestamp
  const { valid, validation } = backendValidateTimestamp(scannedPayload);
  
  // Step 4: Process attendance based on validity
  processAttendance(valid, validation);
  
  console.log('\n' + '=' .repeat(60));
  console.log('🏁 FLOW COMPLETE!\n');
}

// Demo with expired QR
function demoExpiredQR() {
  console.log('🎬 DEMONSTRATING EXPIRED QR REJECTION\n');
  console.log('=' .repeat(60));
  
  // Create an expired QR (6 minutes ago)
  const expiredTime = Date.now() - (6 * 60 * 1000);
  const expiredQR = {
    id: `attendance_${expiredTime}`,
    type: 'attendance_check',
    timestamp: expiredTime,
    expiresAt: new Date(expiredTime + 5 * 60 * 1000).toISOString(),
    checksum: Buffer.from(`attendance_${expiredTime}_${expiredTime}`, 'utf8').toString('base64'),
    location: 'admin_dashboard',
    user: { username: 'prof_johnson', fullName: 'Dr. Sarah Johnson' }
  };
  
  console.log('🎯 ADMIN DASHBOARD: Generated QR 6 minutes ago (expired)');
  console.log('📱 STUDENT SCANS: Old QR code');
  
  const { valid, validation } = backendValidateTimestamp(expiredQR);
  processAttendance(valid, validation);
  
  console.log('\n' + '=' .repeat(60));
  console.log('🏁 EXPIRED QR REJECTED!\n');
}

// Run demonstrations
if (require.main === module) {
  demoCompleteFlow();
  console.log('\n');
  demoExpiredQR();
}

module.exports = { demoCompleteFlow, demoExpiredQR };
