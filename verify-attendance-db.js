/**
 * Verify Attendance Database Records
 * This script checks if QR attendance records are properly stored with all required fields
 */

require('dotenv').config();
const mongoose = require('mongoose');
const Attendance = require('./models/Attendance');
const Student = require('./models/Student');

async function verifyAttendanceRecords() {
  console.log('🔍 Verifying Attendance Database Records\n');

  try {
    // Connect to database
    const dbUri = process.env.MONGODB_URI;
    console.log('🔄 Connecting to MongoDB...');
    await mongoose.connect(dbUri);
    console.log('✅ Connected to MongoDB\n');

    // Get recent QR scan attendance records (last 24 hours)
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);

    console.log('📊 Fetching QR attendance records from last 24 hours...');
    const qrAttendanceRecords = await Attendance.find({
      Date: { $gte: yesterday },
      attendanceType: 'qr_scan',
      'qrScannerLocation.coordinates.latitude': { $exists: true }
    });

    console.log(`📄 Found ${qrAttendanceRecords.length} QR attendance records\n`);

    if (qrAttendanceRecords.length === 0) {
      console.log('⚠️ No QR attendance records found in the last 24 hours.');
      console.log('   Run the QR test script first: node test-qr-realtime.js\n');
      return false;
    }

    // Verify each record has required fields
    let validationErrors = 0;
    
    qrAttendanceRecords.forEach((record, index) => {
      console.log(`🔍 Validating Record ${index + 1}:`);
      console.log(`   📄 ID: ${record._id}`);
      console.log(`   👤 Student ID: ${record.StudentID || 'N/A'}`);
      console.log(`   📅 Date: ${record.Date?.toLocaleString()}`);
      console.log(`   ✅ Status: ${record.Status}`);
      console.log(`   🎯 Attendance Type: ${record.attendanceType}`);
      
      // Check QR Scanner Location
      if (record.qrScannerLocation?.coordinates?.latitude && record.qrScannerLocation?.coordinates?.longitude) {
        console.log(`   📍 QR Location: ${record.qrScannerLocation.coordinates.formatted?.latitude}, ${record.qrScannerLocation.coordinates.formatted?.longitude}`);
        console.log(`   📏 Distance: ${record.qrScannerLocation.distance || 'N/A'}m`);
        console.log(`   🎯 GPS Accuracy: ${record.qrScannerLocation.accuracy || 'N/A'}m`);
      } else {
        console.log('   ❌ Missing QR scanner location coordinates');
        validationErrors++;
      }
      
      // Check Location Verification
      if (record.locationVerification) {
        console.log(`   🔍 Verification Method: ${record.locationVerification.method}`);
        console.log(`   ✅ Verification Status: ${record.locationVerification.status}`);
        
        if (record.locationVerification.proximity) {
          console.log(`   📐 Proximity Distance: ${record.locationVerification.proximity.distance || 'N/A'}m`);
          console.log(`   📏 Max Allowed: ${record.locationVerification.proximity.maxAllowed || 'N/A'}m`);
          console.log(`   ✅ Within Range: ${record.locationVerification.proximity.isWithinRange ? 'Yes' : 'No'}`);
        }
      } else {
        console.log('   ❌ Missing location verification data');
        validationErrors++;
      }
      
      // Check Metadata
      if (record.metadata) {
        try {
          const locationMeta = JSON.parse(record.metadata.location || '{}');
          if (locationMeta.qrScanner) {
            console.log('   📊 Location metadata: ✅ Valid');
          }
          
          if (record.metadata.qrCode) {
            const qrMeta = JSON.parse(record.metadata.qrCode);
            console.log(`   🎯 QR Code ID: ${qrMeta.qrCodeId || 'N/A'}`);
            console.log(`   👨‍🏫 Generated By: ${qrMeta.generatedBy || 'N/A'}`);
            console.log(`   📅 Generated At: ${qrMeta.generatedAt ? new Date(qrMeta.generatedAt).toLocaleString() : 'N/A'}`);
          }
        } catch (metaError) {
          console.log('   ⚠️ Error parsing metadata:', metaError.message);
        }
      } else {
        console.log('   ❌ Missing metadata');
        validationErrors++;
      }
      
      console.log('   ' + '-'.repeat(50));
    });
    
    // Summary
    console.log('\n📈 Validation Summary:');
    console.log(`   📄 Total Records: ${qrAttendanceRecords.length}`);
    console.log(`   ✅ Valid Records: ${qrAttendanceRecords.length - validationErrors}`);
    console.log(`   ❌ Records with Issues: ${validationErrors}`);
    
    // Test recent activity
    const today = new Date().toISOString().split('T')[0];
    const todayRecords = await Attendance.find({
      Date: { 
        $gte: new Date(today + 'T00:00:00.000Z'),
        $lt: new Date(today + 'T23:59:59.999Z')
      },
      attendanceType: 'qr_scan'
    });
    
    console.log(`\n📊 Today's QR Attendance Activity:`);
    console.log(`   📄 Records Today: ${todayRecords.length}`);
    console.log(`   👥 Unique Students: ${[...new Set(todayRecords.map(r => r.StudentID))].length}`);
    
    // Check for Socket.IO integration readiness
    console.log(`\n🔌 Real-time Integration Status:`);
    console.log(`   📡 Records have timestamps: ${qrAttendanceRecords.every(r => r.createdAt) ? '✅' : '❌'}`);
    console.log(`   🎯 Records have attendance type: ${qrAttendanceRecords.every(r => r.attendanceType) ? '✅' : '❌'}`);
    console.log(`   📍 Records have location data: ${qrAttendanceRecords.every(r => r.qrScannerLocation?.coordinates) ? '✅' : '❌'}`);
    
    const success = validationErrors === 0;
    
    if (success) {
      console.log('\n🎉 All attendance records are properly formatted and ready for deployment!');
      console.log('\n📋 Database is ready for:');
      console.log('   • Real-time QR attendance scanning');
      console.log('   • Socket.IO live updates');
      console.log('   • Admin dashboard integration');
      console.log('   • Location-based verification');
    } else {
      console.log('\n⚠️ Some records have validation issues. Check the output above.');
    }
    
    return success;
    
  } catch (error) {
    console.error('❌ Error verifying attendance records:', error.message);
    return false;
  } finally {
    await mongoose.disconnect();
    console.log('\n🔚 Disconnected from MongoDB');
  }
}

// Run verification
if (require.main === module) {
  verifyAttendanceRecords().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('💥 Verification failed:', error);
    process.exit(1);
  });
}

module.exports = { verifyAttendanceRecords };
