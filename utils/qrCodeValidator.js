/**
 * QR Code Validation Utility
 * Validates QR codes generated by AdminQRGenerator for attendance tracking
 */

/**
 * Validate QR code structure and content
 * @param {Object} qrData - Parsed QR code data
 * @returns {Object} - Validation result with isValid, message, and extractedData
 */
function validateQRCode(qrData) {
  try {
    // Check basic structure
    if (!qrData || typeof qrData !== 'object') {
      return {
        isValid: false,
        message: 'Invalid QR code format: not a valid object',
        extractedData: null
      };
    }

    // Check required fields
    const requiredFields = ['id', 'type', 'timestamp', 'expiresAt', 'checksum'];
    for (const field of requiredFields) {
      if (!qrData[field]) {
        return {
          isValid: false,
          message: `Invalid QR code: missing required field '${field}'`,
          extractedData: null
        };
      }
    }

    // Validate QR code type
    if (qrData.type !== 'attendance_check') {
      return {
        isValid: false,
        message: `Invalid QR code type: expected 'attendance_check', got '${qrData.type}'`,
        extractedData: null
      };
    }

    // Check expiration
    const expiresAt = new Date(qrData.expiresAt);
    const now = new Date();
    
    if (isNaN(expiresAt.getTime())) {
      return {
        isValid: false,
        message: 'Invalid QR code: invalid expiration date format',
        extractedData: null
      };
    }

    if (expiresAt < now) {
      const expiredMinutes = Math.round((now - expiresAt) / (1000 * 60));
      return {
        isValid: false,
        message: `QR code has expired ${expiredMinutes} minute(s) ago`,
        extractedData: null
      };
    }

    // Validate checksum
    const expectedChecksum = Buffer.from(`${qrData.id}_${qrData.timestamp}`, 'utf8').toString('base64');
    if (qrData.checksum !== expectedChecksum) {
      return {
        isValid: false,
        message: 'Invalid QR code: checksum verification failed',
        extractedData: null
      };
    }

    // Validate user data
    if (!qrData.user || typeof qrData.user !== 'object') {
      return {
        isValid: false,
        message: 'Invalid QR code: no user identity found',
        extractedData: null
      };
    }

    // Check if user has student ID
    if (!qrData.user.studentId) {
      return {
        isValid: false,
        message: 'Invalid QR code: no student ID found in user identity',
        extractedData: null
      };
    }

    // Extract student information
    const extractedData = {
      qrCodeId: qrData.id,
      generatedAt: new Date(qrData.timestamp),
      expiresAt: expiresAt,
      location: qrData.location || 'unknown',
      generatedBy: {
        userId: qrData.user.userId,
        username: qrData.user.username,
        email: qrData.user.email,
        role: qrData.user.role || 'admin'
      },
      studentInfo: {
        studentId: qrData.user.studentId,
        firstName: qrData.user.firstName,
        lastName: qrData.user.lastName,
        fullName: qrData.user.fullName || `${qrData.user.firstName || ''} ${qrData.user.lastName || ''}`.trim(),
        email: qrData.user.email,
        department: qrData.user.department,
        hasStudentRecord: qrData.user.hasStudentRecord
      },
      adminId: qrData.adminId, // For backward compatibility
      checksum: qrData.checksum
    };

    return {
      isValid: true,
      message: 'QR code is valid',
      extractedData
    };

  } catch (error) {
    return {
      isValid: false,
      message: `QR code validation error: ${error.message}`,
      extractedData: null
    };
  }
}

/**
 * Parse QR code string and validate
 * @param {string} qrString - Raw QR code string
 * @returns {Object} - Validation result
 */
function parseAndValidateQR(qrString) {
  try {
    const qrData = JSON.parse(qrString);
    return validateQRCode(qrData);
  } catch (error) {
    return {
      isValid: false,
      message: `Failed to parse QR code JSON: ${error.message}`,
      extractedData: null
    };
  }
}

/**
 * Check if QR code is about to expire (within warning threshold)
 * @param {Object} qrData - Parsed QR code data
 * @param {number} warningMinutes - Warning threshold in minutes (default: 1)
 * @returns {Object} - Expiration warning info
 */
function checkExpirationWarning(qrData, warningMinutes = 1) {
  try {
    const expiresAt = new Date(qrData.expiresAt);
    const now = new Date();
    const timeUntilExpiry = expiresAt - now;
    const minutesUntilExpiry = Math.round(timeUntilExpiry / (1000 * 60));

    return {
      isExpiringSoon: minutesUntilExpiry <= warningMinutes && minutesUntilExpiry > 0,
      minutesRemaining: minutesUntilExpiry,
      timeUntilExpiry
    };
  } catch (error) {
    return {
      isExpiringSoon: false,
      minutesRemaining: 0,
      timeUntilExpiry: 0,
      error: error.message
    };
  }
}

/**
 * Extract attendance metadata from QR code for logging
 * @param {Object} validatedData - Validated QR code data
 * @returns {Object} - Attendance metadata
 */
function extractAttendanceMetadata(validatedData) {
  if (!validatedData || !validatedData.extractedData) {
    return {};
  }

  const data = validatedData.extractedData;
  
  return {
    qrCodeId: data.qrCodeId,
    generatedAt: data.generatedAt,
    generatedBy: data.generatedBy.username,
    generatedByUserId: data.generatedBy.userId,
    scannedAt: new Date(),
    studentId: data.studentInfo.studentId,
    studentName: data.studentInfo.fullName,
    department: data.studentInfo.department,
    location: data.location,
    attendanceMethod: 'qr_scan',
    checksum: data.checksum
  };
}

module.exports = {
  validateQRCode,
  parseAndValidateQR,
  checkExpirationWarning,
  extractAttendanceMetadata
};
