const mongoose = require('mongoose');

const attendanceSchema = new mongoose.Schema(
  {
    StudentID: {
      type: Number,
      required: true,
    },
    Date: {
      type: Date,
      required: true,
    },
    Status: {
      type: String,
      enum: ['Present', 'Absent', 'Late', 'Partial'],
      required: true,
    },
    Remarks: {
      type: String,
      trim: true,
    },
    // Zoom meeting specific fields
    meetingId: {
      type: String,
      ref: 'ZoomMeeting',
      required: false,
    },
    attendanceType: {
      type: String,
      enum: ['manual', 'zoom', 'face_recognition', 'hybrid', 'qr_scan'],
      default: 'manual',
    },
    zoomData: {
      participantId: String,
      joinTime: Date,
      leaveTime: Date,
      duration: Number, // in seconds
      attentiveness: String,
      recordingConsent: Boolean,
      participantEmail: String,
      participantName: String,
    },
    attendancePercentage: {
      type: Number,
      min: 0,
      max: 100,
      default: 100,
    },
    minimumDurationMet: {
      type: Boolean,
      default: true,
    },
    autoGenerated: {
      type: Boolean,
      default: false,
    },
    verificationStatus: {
      type: String,
      enum: ['verified', 'pending', 'disputed', 'unverified'],
      default: 'unverified',
    },
    metadata: {
      ipAddress: String,
      userAgent: String,
      location: String,
      deviceType: String,
    },
    // QR Scanner location data
    qrScannerLocation: {
      coordinates: {
        latitude: {
          type: Number,
          min: -90,
          max: 90
        },
        longitude: {
          type: Number,
          min: -180,
          max: 180
        },
        formatted: {
          latitude: String, // e.g., "5.29836N"
          longitude: String // e.g., "2.00042W"
        }
      },
      distance: {
        type: Number, // distance in meters, e.g., 15.02
        min: 0
      },
      accuracy: Number, // GPS accuracy in meters
      timestamp: {
        type: Date,
        default: Date.now
      }
    },
    locationVerification: {
      method: {
        type: String,
        enum: ['qr_scanner', 'gps', 'manual', 'hybrid'],
        default: 'qr_scanner'
      },
      status: {
        type: String,
        enum: ['verified', 'pending', 'failed', 'location_mismatch'],
        default: 'pending'
      },
      proximity: {
        distance: Number, // calculated distance between QR scanner and user
        maxAllowed: {
          type: Number,
          default: 50 // 50 meters default
        },
        isWithinRange: {
          type: Boolean,
          default: false
        }
      },
      verifiedAt: Date,
      notes: String
    },
  },
  {
    timestamps: true,
  }
);

const Attendance = mongoose.model('Attendance', attendanceSchema);

module.exports = Attendance;
